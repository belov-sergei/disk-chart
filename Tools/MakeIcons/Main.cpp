// Copyright ❤️ 2023-2024, Sergei Belov

#include "Filesystem.h"
#include "fmt/format.h"

int main(int argc, char* argv[]) {
	std::ofstream stream("Source/Library/Icons.Generated.h");
	stream << "// WARNING: This file is automatically generated. Manual changes to this file may be lost.\n\n";
	stream << "#pragma once\n\n";
	stream << "// clang-format off\n";

	for (auto& icon : std::filesystem::directory_iterator("Icons")) {
		const auto filename = icon.path().stem().string();

		const auto file = Filesystem::ReadFile<unsigned char>(icon.path());

		const int length = file.size();
		auto* data = file.data();

		stream << fmt::format("constexpr unsigned char {}Icon[] = {{\n\t", filename);
		for (int offset = 0; offset < length; offset++) {
			stream << static_cast<int>(*data++) << ',';

			if (offset > 0 && offset % 50 == 0) {
				stream << "\n\t";
			}
		}
		stream << "\n};\n\n";
	}

	const auto applicationIcon = Filesystem::ReadFile<unsigned char>("Documentation/Icon.png");
	const int length = applicationIcon.size();
	auto* data = applicationIcon.data();

	stream << fmt::format("constexpr unsigned char {}Icon[] = {{\n\t", "Application");
	for (int offset = 0; offset < length; offset++) {
		stream << static_cast<int>(*data++) << ',';

		if (offset > 0 && offset % 50 == 0) {
			stream << "\n\t";
		}
	}
	stream << "\n};\n\n";
	stream << "// clang-format on\n";

	return 0;
}
